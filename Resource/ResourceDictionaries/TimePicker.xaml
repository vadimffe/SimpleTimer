<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converterslocal="clr-namespace:SimpleTimer.Resources.Converter"
                    xmlns:controlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ValidationErrorTemplate.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
        <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />-->
        
        <!--<ResourceDictionary Source="pack://application:,,,/SimpleTimer.Resources;component/ResourceDictionaries/Color.xaml"/>-->
        
        <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Blue.xaml" />-->
        <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Amber.xaml" />-->
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Calendar.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DatePicker.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TimePicker.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <converters:TextFieldHintVisibilityConverter x:Key="TextFieldHintVisibilityConverter" />
    <converters:MathConverter Operation="Divide" x:Key="DivisionMathConverter" />
    <converters:TextFieldClearButtonVisibilityConverter x:Key="ClearButtonVisibilityConverter" />
    <converters:NotConverter x:Key="NotConverter" />
    <converters:MathConverter x:Key="MathMultiplyConverter" Operation="Multiply" />
    <converterslocal:FloatingHintOffsetCalculationConverter x:Key="FloatingHintOffsetCalculationConverter" />
    <converterslocal:PickerInnerPaddingConverter x:Key="PickerInnerPaddingConverter" />

    <Style x:Key="MaterialDesignTimePickerTextBox" TargetType="{x:Type wpf:TimePickerTextBox}">
        <Setter Property="Foreground" 
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, 
            Path=(TextElement.Foreground)}" />
        <Setter Property="BorderBrush" 
                Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0 0 0 1"/>
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" 
                Value="{x:Static converterslocal:Constants.DefaultTextBoxViewMargin}" />
        <Setter Property="CaretBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="Foreground" Value="#FFB2C6F3"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Padding" Value="{x:Static converterslocal:Constants.TextBoxDefaultPadding}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="ContextMenu" Value="{StaticResource MaterialDesignDefaultContextMenu}" />
        <Setter Property="Cursor" Value="IBeam"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Local"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:TimePickerTextBox}">
                    <Grid>
                        <Grid.Resources>
                            <SolidColorBrush x:Key="WatermarkBrush" Color="{TemplateBinding Foreground}" />
                        </Grid.Resources>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked" />
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To=".23" Storyboard.TargetProperty="Opacity" 
                                                         Storyboard.TargetName="PART_Watermark" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" 
                                                         From="0" To="1" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" 
                                                         From="0" To="1" Duration="0:0:0.3">
                                            <DoubleAnimation.EasingFunction>
                                                <SineEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" 
                                                         To="0" BeginTime="0:0:0.45" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" 
                                                         To="0" BeginTime="0:0:0.45" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused">
                                    <Storyboard TargetName="RippleOnFocusScaleTransform">
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleX" 
                                                         To="0" Duration="0" />
                                        <DoubleAnimation Storyboard.TargetProperty="ScaleY" 
                                                         To="0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Background="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.TextFieldCornerRadius}"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.RippleOnFocusEnabled, 
                            Converter={StaticResource BooleanToVisibilityConverter}}"
                            RenderTransformOrigin="0.5,0.5">
                            <Border.RenderTransform>
                                <ScaleTransform x:Name="RippleOnFocusScaleTransform" ScaleX="0" ScaleY="0" />
                            </Border.RenderTransform>
                        </Border>
                        <AdornerDecorator>
                            <Border
                                x:Name="border"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="Transparent"
                                BorderThickness="0"
                                Background="{TemplateBinding Background}"
                                CornerRadius="3"
                                SnapsToDevicePixels="True">
                                <!--wpf:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                                wpf:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}"-->
                                <Grid
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Grid
                                        x:Name="grid"
                                        VerticalAlignment="Center"
                                        MinWidth="1">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock
                                            x:Name="PrefixTextBlock"
                                            Grid.Column="0"
                                            FontSize="{TemplateBinding FontSize}"
                                            Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                            Text="{TemplateBinding wpf:TextFieldAssist.PrefixText}" />
                                        <ContentControl
                                            Grid.Column="1"
                                            x:Name="PART_Watermark"
                                            Focusable="False"
                                            IsHitTestVisible="False"
                                            Opacity="0"
                                            Visibility="Collapsed" />
                                        <ScrollViewer
                                            x:Name="PART_ContentHost"
                                            Grid.Column="1"
                                            Panel.ZIndex="1"
                                            Focusable="false"
                                            HorizontalScrollBarVisibility="Hidden"
                                            VerticalScrollBarVisibility="Hidden"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                            converterslocal:ScrollViewerAssist.IgnorePadding="True" />
                                        <wpf:SmartHint
                                            x:Name="Hint"
                                            Grid.Column="1"
                                            HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, 
                                            Converter={x:Static converters:HintProxyFabricConverter.Instance}}"
                                            FontSize="{TemplateBinding FontSize}"
                                            HintOpacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                            UseFloating="{TemplateBinding wpf:HintAssist.IsFloating}"
                                            FloatingScale="{TemplateBinding wpf:HintAssist.FloatingScale}"
                                            FloatingOffset="{TemplateBinding wpf:HintAssist.FloatingOffset}"
                                            Margin="15,0,15,0">
                                            <wpf:SmartHint.Hint>
                                                <Border
                                                    x:Name="HintBackgroundBorder"
                                                    Background="{TemplateBinding wpf:HintAssist.Background}"
                                                    CornerRadius="2">
                                                    <ContentPresenter
                                                        x:Name="HintWrapper"
                                                        Content="Select" />
                                                </Border>
                                            </wpf:SmartHint.Hint>
                                        </wpf:SmartHint>
                                        <TextBlock
                                            x:Name="SuffixTextBlock"
                                            Grid.Column="2"
                                            FontSize="{TemplateBinding FontSize}"
                                            Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                            Text="{TemplateBinding wpf:TextFieldAssist.SuffixText}" >
                                        </TextBlock>
                                    </Grid>
                                    <Button
                                        Grid.Column="1"
                                        x:Name="PART_ClearButton"
                                        Height="Auto"
                                        Padding="2 0 0 0"
                                        Focusable="False"
                                        Style="{DynamicResource MaterialDesignToolButton}">
                                        <Button.Visibility>
                                            <MultiBinding Converter="{StaticResource ClearButtonVisibilityConverter}">
                                                <Binding RelativeSource="{RelativeSource TemplatedParent}" 
                                                         Path="(wpf:TextFieldAssist.HasClearButton)" />
                                                <Binding ElementName="Hint" Path="IsContentNullOrEmpty" />
                                            </MultiBinding>
                                        </Button.Visibility>
                                        <wpf:PackIcon Margin="0" Kind="CloseCircle" />
                                    </Button>
                                </Grid>
                            </Border>
                        </AdornerDecorator>
                        <!--<Border
                            x:Name="borderUnderline"
                            Background="{TemplateBinding BorderBrush}"
                            Height="0"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Bottom"
                            SnapsToDevicePixels="True" />-->
                        <wpf:Underline
                            x:Name="Underline"
                            Visibility="{TemplateBinding wpf:TextFieldAssist.DecorationVisibility}"
                            CornerRadius="{TemplateBinding wpf:TextFieldAssist.UnderlineCornerRadius}"
                            Background="{TemplateBinding wpf:TextFieldAssist.UnderlineBrush}" />
                        <Canvas VerticalAlignment="Bottom">
                            <TextBlock
                                Canvas.Top="2"
                                FontSize="10"
                                MaxWidth="{Binding ActualWidth, ElementName=border}"
                                Opacity="{TemplateBinding wpf:HintAssist.HintOpacity}"
                                Text="{TemplateBinding wpf:HintAssist.HelperText}" />
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="Foreground" 
                                    Value="{Binding Path=(wpf:HintAssist.Foreground), 
                                RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Hint" Property="FloatingOffset">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontFamily" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontSize" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" 
                                                 Path="(wpf:HintAssist.FloatingScale)" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="grid" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontFamily" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontSize" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" 
                                                 Path="(wpf:HintAssist.FloatingScale)" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter Property="Padding" Value="16 8" />
                            <Setter Property="Background" Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True">
                            <Setter Property="VerticalContentAlignment" Value="Top" />
                            <Setter Property="BorderThickness" Value="1" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                            <Setter Property="Padding" Value="16" />
                            <Setter TargetName="Underline" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                            <Setter TargetName="HintWrapper" Property="Opacity"
                                    Value="{Binding Path=(wpf:HintAssist.HintOpacity), 
                                RelativeSource={RelativeSource TemplatedParent}}" />
                            <Setter TargetName="Hint" Property="FloatingOffset">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource FloatingHintOffsetCalculationConverter}">
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontFamily" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="FontSize" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" 
                                                 Path="(wpf:HintAssist.FloatingScale)" />
                                        <Binding RelativeSource="{RelativeSource TemplatedParent}" 
                                                 Path="ActualHeight" />
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HintBackgroundBorder" Property="Padding" Value="4, 0" />
                            <Setter Property="wpf:HintAssist.Background" 
                                    Value="{DynamicResource MaterialDesignPaper}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                                <Condition Property="wpf:HintAssist.IsFloating" Value="True" />
                                <Condition Property="IsKeyboardFocused" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="HintWrapper" Property="Opacity" Value="1" />
                        </MultiTrigger>

                        <!--IsEnabled-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderBrush" Value="Transparent" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="grid" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="border" Property="wpf:BottomDashedLineAdorner.IsAttached" Value="True" />
                            <!--<Setter TargetName="borderUnderline" Property="Height" Value="0" />-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />
                            <!--<Setter TargetName="borderUnderline" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />-->
                            <!--<Setter TargetName="borderUnderline" Property="Height" Value="1" />-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" 
                                    Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                            <Setter TargetName="PrefixTextBlock" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="PART_ContentHost" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="SuffixTextBlock" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="PART_ClearButton" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />
                            <Setter TargetName="HintWrapper" Property="Opacity">
                                <Setter.Value>
                                    <Binding
                                        Path="(wpf:HintAssist.HintOpacity)"
                                        RelativeSource="{RelativeSource TemplatedParent}"
                                        Converter="{StaticResource MathMultiplyConverter}"
                                        ConverterParameter="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}" />
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <!--IsKeyboardFocused-->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Underline" Property="IsActive" Value="True" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), 
                                RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="borderUnderline" Property="Height" Value="2" />-->
                        </MultiTrigger>

                        <!--IsMouseOver-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), 
                                RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.NewSpecHighlightingEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="BorderThickness" Value="0,0,0,2" />
                            <Setter TargetName="border" Property="Padding" Value="0,4,0,3" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" 
                                    Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                            <!--<Setter TargetName="borderUnderline" Property="Height" Value="1" />-->
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                        </MultiTrigger>

                        <!--Validation.HasError-->
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                            <Setter TargetName="Underline" Property="Background" 
                                    Value="{DynamicResource MaterialDesignValidationErrorBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Validation.HasError" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Margin" Value="-1" />
                            <Setter Property="BorderThickness" Value="2" />
                            <Setter Property="BorderBrush" 
                                    Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="MaterialDesignTimePicker" TargetType="{x:Type wpf:TimePicker}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" 
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, 
            Path=(TextElement.Foreground)}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}" />
        <Setter Property="BorderThickness" Value="0 0 0 0"/>
        <Setter Property="Is24Hours" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="{x:Static converterslocal:Constants.TextBoxDefaultPadding}" />
        <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" 
                Value="{x:Static converterslocal:Constants.DefaultTextBoxViewMargin}" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>
        <Setter Property="wpf:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="wpf:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
        <Setter Property="ClockStyle" Value="{DynamicResource MaterialDesignClock}" />
        <Setter Property="ClockHostContentControlStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Style.Setters>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ContentControl}">
                                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, 
                                        Path=(wpf:ShadowAssist.CacheMode)}">
                                        <Border Effect="{DynamicResource MaterialDesignShadowDepth4}" 
                                                Padding="16 8 16 24">
                                            <ContentPresenter Content="{TemplateBinding ContentControl.Content}" 
                                                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" />
                                        </Border>
                                    </AdornerDecorator>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style.Setters>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:TimePicker}">
                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="ClockButtonTemplate" TargetType="{x:Type Button}">
                            <wpf:PackIcon
                                Kind="ClockOutline"
                                Foreground="#FFB2C6F3"
                                Background="Transparent"
                                VerticalAlignment="Center" />
                        </ControlTemplate>
                    </ControlTemplate.Resources>
                    <Grid x:Name="PART_Root">
                        <ToggleButton x:Name="TimePickerToggleButton" 
                                            Background="Transparent">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <Border Background="{TemplateBinding Background}"
                                                BorderBrush="Transparent"
                                                BorderThickness="1"
                                                CornerRadius="2">
                                        <ContentPresenter />
                                    </Border>
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <converters:TimePickerTextBox x:Name="PART_TextBox" 
                                                          IsEnabled="False"
                                                          BorderBrush="{TemplateBinding Property=BorderBrush}" 
                                                          Grid.Column="0" 
                                                          converters:TextFieldAssist.DecorationVisibility="{TemplateBinding converters:TextFieldAssist.DecorationVisibility}" 
                                                          Focusable="{TemplateBinding Focusable}" 
                                                          converters:HintAssist.FloatingScale="{TemplateBinding converters:HintAssist.FloatingScale}" 
                                                          converters:HintAssist.FloatingOffset="{TemplateBinding converters:HintAssist.FloatingOffset}" 
                                                          converters:HintAssist.Foreground="{TemplateBinding converters:HintAssist.Foreground}" 
                                                          converters:TextFieldAssist.HasClearButton="{TemplateBinding converters:TextFieldAssist.HasClearButton}" 
                                                          converters:TextFieldAssist.HasFilledTextField="{TemplateBinding converters:TextFieldAssist.HasFilledTextField}" 
                                                          HorizontalAlignment="Center" 
                                                          converters:HintAssist.HelperText="{TemplateBinding converters:HintAssist.HelperText}" 
                                                          converters:HintAssist.HintOpacity="{TemplateBinding converters:HintAssist.HintOpacity}" 
                                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                          converters:TextFieldAssist.HasOutlinedTextField="{TemplateBinding converters:TextFieldAssist.HasOutlinedTextField}" 
                                                          converters:HintAssist.Hint="{TemplateBinding converters:HintAssist.Hint}" 
                                                          converters:HintAssist.IsFloating="{TemplateBinding converters:HintAssist.IsFloating}" 
                                                          converters:TextFieldAssist.NewSpecHighlightingEnabled="{TemplateBinding converters:TextFieldAssist.NewSpecHighlightingEnabled}" 
                                                          converters:TextFieldAssist.PrefixText="{TemplateBinding converters:TextFieldAssist.PrefixText}" 
                                                          converters:TextFieldAssist.RippleOnFocusEnabled="{TemplateBinding converters:TextFieldAssist.RippleOnFocusEnabled}" 
                                                          Grid.Row="0" 
                                                          Style="{DynamicResource MaterialDesignTimePickerTextBox}" 
                                                          converters:TextFieldAssist.SuffixText="{TemplateBinding converters:TextFieldAssist.SuffixText}" 
                                                          converters:TextFieldAssist.TextBoxViewMargin="{TemplateBinding converters:TextFieldAssist.TextBoxViewMargin}" 
                                                          converters:TextFieldAssist.TextFieldCornerRadius="{TemplateBinding converters:TextFieldAssist.TextFieldCornerRadius}" 
                                                          converters:TextFieldAssist.UnderlineBrush="{TemplateBinding converters:TextFieldAssist.UnderlineBrush}" 
                                                          converters:TextFieldAssist.UnderlineCornerRadius="{TemplateBinding converters:TextFieldAssist.UnderlineCornerRadius}" 
                                                          VerticalContentAlignment="Center">
                                <converters:TimePickerTextBox.Background>
                                    <SolidColorBrush Color="Azure" Opacity="0.02"/>
                                </converters:TimePickerTextBox.Background>
                                
                                <converters:TimePickerTextBox.Padding>
                                    <MultiBinding Converter="{StaticResource PickerInnerPaddingConverter}">
                                        <Binding Path="Padding" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding ElementName="PART_Button" Mode="OneWay" Path="ActualWidth"/>
                                    </MultiBinding>
                                </converters:TimePickerTextBox.Padding>
                            </converters:TimePickerTextBox>
                        </ToggleButton>
                        <!--<Button
                            x:Name="PART_Button"
                            Foreground="{TemplateBinding BorderBrush}"
                            Focusable="False"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            Margin="{TemplateBinding Padding, Converter={StaticResource PickerInnerPaddingConverter}}"
                            Height="16" />-->
                        <Popup
                            x:Name="PART_Popup"
                               IsOpen="{Binding ElementName=TimePickerToggleButton,
                                 Path=IsChecked}"
                            AllowsTransparency="True"
                            Placement="Custom"
                            CustomPopupPlacementCallback="{x:Static wpf:CustomPopupPlacementCallbackHelper.LargePopupCallback}"
                            PlacementTarget="{Binding ElementName=PART_TextBox}"
                            StaysOpen="False"
                            PopupAnimation="Fade" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="wpf:TextFieldAssist.HasFilledTextField" Value="True">
                            <Setter Property="Padding" Value="16 8" />
                            <Setter Property="Background" 
                                    Value="{DynamicResource MaterialDesignTextFieldBoxBackground}" />
                            <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" 
                                    Value="{x:Static converterslocal:Constants.DefaultTextBoxViewMarginEmbedded}" />
                        </Trigger>
                        <Trigger Property="wpf:TextFieldAssist.HasOutlinedTextField" 
                                 Value="True">
                            <Setter Property="Padding" Value="16" />
                            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextAreaBorder}" />
                            <Setter Property="wpf:TextFieldAssist.TextBoxViewMargin" 
                                    Value="{x:Static converterslocal:Constants.DefaultTextBoxViewMarginEmbedded}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="False" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="True" />
                                <!--<Condition SourceName="PART_Button" Property="IsMouseOver" Value="True" />-->
                            </MultiTrigger.Conditions>
                            <!--<Setter TargetName="PART_Button" Property="Foreground" 
                                    Value="{DynamicResource PrimaryHueMidBrush}"/>-->
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <!--<Setter TargetName="PART_Button" Property="Opacity" 
                                    Value="{x:Static converterslocal:Constants.TextBoxNotEnabledOpacity}"/>-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="BorderBrush" 
                                    Value="{DynamicResource MaterialDesignTextAreaInactiveBorder}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="PART_TextBox" Property="IsKeyboardFocused" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_TextBox" Property="BorderBrush" 
                                    Value="{Binding Path=(wpf:TextFieldAssist.UnderlineBrush), 
                                RelativeSource={RelativeSource Self}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" 
                                    Value="{DynamicResource MaterialDesignTextFieldBoxHoverBackground}" />
                        </MultiTrigger>

                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter TargetName="PART_TextBox" 
                                    Property="wpf:ValidationAssist.HasError" Value="True" />
                            <Setter Property="BorderBrush" 
                                    Value="{DynamicResource MaterialDesignValidationErrorBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MaterialDesignFloatingHintTimePicker" TargetType="{x:Type wpf:TimePicker}" 
           BasedOn="{StaticResource MaterialDesignTimePicker}">
        <Setter Property="wpf:HintAssist.IsFloating" Value="True" />
    </Style>

    <Style x:Key="MaterialDesignFilledTimePicker" TargetType="{x:Type wpf:TimePicker}" 
           BasedOn="{StaticResource MaterialDesignFloatingHintTimePicker}">
        <Setter Property="wpf:TextFieldAssist.HasFilledTextField" Value="True" />
        <Setter Property="wpf:TextFieldAssist.RippleOnFocusEnabled" Value="True" />
        <Setter Property="wpf:TextFieldAssist.TextFieldCornerRadius" Value="4,4,0,0" />
        <Setter Property="wpf:TextFieldAssist.UnderlineCornerRadius" Value="0" />
    </Style>

    <Style x:Key="MaterialDesignOutlinedTimePicker" TargetType="{x:Type wpf:TimePicker}" 
           BasedOn="{StaticResource MaterialDesignFloatingHintTimePicker}">
        <Setter Property="wpf:TextFieldAssist.HasOutlinedTextField" Value="True" />
        <Setter Property="wpf:TextFieldAssist.TextFieldCornerRadius" Value="4" />
    </Style>
    <ControlTemplate x:Key="MaterialDesignValidationErrorTemplate">
        <ControlTemplate.Resources>
            <DataTemplate DataType="{x:Type ValidationError}">
                <TextBlock Foreground="{DynamicResource ValidationErrorBrush}" 
                           FontSize="{Binding AdornedElement.(converters:ValidationAssist.FontSize), 
                    ElementName=Placeholder}" 
                           HorizontalAlignment="{Binding AdornedElement.(converters:ValidationAssist.HorizontalAlignment), ElementName=Placeholder}" 
                           Margin="2" 
                           MaxWidth="{Binding ActualWidth, ElementName=Placeholder}" 
                           Text="{Binding ErrorContent}" 
                           TextWrapping="Wrap" UseLayoutRounding="false"/>
            </DataTemplate>
        </ControlTemplate.Resources>
        <StackPanel>
            <AdornedElementPlaceholder x:Name="Placeholder"/>
            <Border x:Name="DefaultErrorViewer" Background="{Binding AdornedElement.(converters:ValidationAssist.Background), ElementName=Placeholder}" 
                    Visibility="Collapsed">
                <TextBlock Foreground="{DynamicResource ValidationErrorBrush}" 
                           FontSize="{Binding AdornedElement.(converters:ValidationAssist.FontSize), 
                    ElementName=Placeholder}" 
                           HorizontalAlignment="{Binding AdornedElement.(converters:ValidationAssist.HorizontalAlignment), ElementName=Placeholder}" 
                           Margin="0 2" 
                           MaxWidth="{Binding ActualWidth, ElementName=Placeholder}" 
                           Text="{Binding CurrentItem.ErrorContent}" 
                           TextWrapping="Wrap" UseLayoutRounding="false"/>
            </Border>
            <controlzEx:PopupEx x:Name="ValidationPopup" 
                                AllowsTransparency="True" 
                                IsOpen="False" 
                                Placement="{Binding AdornedElement.(converters:ValidationAssist.PopupPlacement), 
                ElementName=Placeholder}" 
                                PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}">
                <Border x:Name="PopupBorder" 
                        Background="{Binding AdornedElement.(converters:ValidationAssist.Background), 
                    ElementName=Placeholder}">
                    <TextBlock Foreground="{DynamicResource ValidationErrorBrush}" 
                               FontSize="{Binding AdornedElement.(converters:ValidationAssist.FontSize), 
                        ElementName=Placeholder}" 
                               HorizontalAlignment="{Binding AdornedElement.(converters:ValidationAssist.HorizontalAlignment), ElementName=Placeholder}" 
                               Margin="0 2"
                               Text="{Binding CurrentItem.ErrorContent}" 
                               TextWrapping="Wrap" UseLayoutRounding="false"/>
                </Border>
            </controlzEx:PopupEx>
        </StackPanel>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.OnlyShowOnFocus), 
                        ElementName=Placeholder}" Value="False"/>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.UsePopup), 
                        ElementName=Placeholder}" Value="True"/>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.Suppress), 
                        ElementName=Placeholder}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsOpen" TargetName="ValidationPopup" Value="True"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.OnlyShowOnFocus), 
                        ElementName=Placeholder}" 
                               Value="False"/>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.UsePopup), 
                        ElementName=Placeholder}" Value="False"/>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.Suppress), 
                        ElementName=Placeholder}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" 
                        TargetName="DefaultErrorViewer" 
                        Value="Visible"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.OnlyShowOnFocus), 
                        ElementName=Placeholder}" Value="True"/>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.UsePopup), 
                        ElementName=Placeholder}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsOpen" 
                        TargetName="ValidationPopup" 
                        Value="{Binding AdornedElement.IsKeyboardFocusWithin, ElementName=Placeholder, Mode=OneWay}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.OnlyShowOnFocus), 
                        ElementName=Placeholder}" 
                               Value="True"/>
                    <Condition Binding="{Binding AdornedElement.(converters:ValidationAssist.UsePopup), 
                        ElementName=Placeholder}" 
                               Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" TargetName="DefaultErrorViewer" 
                        Value="{Binding AdornedElement.IsKeyboardFocusWithin, 
                    Converter={StaticResource BooleanToVisibilityConverter}, 
                    ElementName=Placeholder, Mode=OneWay}"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding AdornedElement.(converters:ValidationAssist.Background), 
                ElementName=Placeholder}" Value="{x:Null}">
                <Setter Property="Background" TargetName="PopupBorder" 
                        Value="{DynamicResource MaterialDesignPaper}"/>
                <Setter Property="Background" TargetName="DefaultErrorViewer" 
                        Value="{DynamicResource MaterialDesignPaper}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding AdornedElement.(converters:TextFieldAssist.HasOutlinedTextField), 
                ElementName=Placeholder}" Value="True">
                <Setter Property="Margin" TargetName="DefaultErrorViewer" Value="0,2,0,0"/>
                <Setter Property="VerticalOffset" TargetName="ValidationPopup" Value="2"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
</ResourceDictionary>